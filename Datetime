strptime() can read strings with date and time information and convert them to datetime objects
my_string = '2019-10-31'
my_date = datetime.strptime(my_string, "%Y-%m-%d") #Create date object in given time format yyyy-mm-dd: full directives here https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior

strftime() converts datetime objects back into strings.
year = now.strftime("%Y")
print("Year:", year)

print('Month: ', my_date.month) # To Get month from date
print('Year: ', my_date.year) # To Get month from year

# Difference between two dates
delta = date2 - date1
print("Difference: ", delta.days)

Schedule assistant

timeslots = [[7, 8], [12, 17], [19, 21]]

def sleep_tester(timeslots):
    timeslots = [[datetime.combine(date.today(), time(hour=num)) for num in slot] for slot in timeslots]
    now = datetime.now()

    #If it's before the first slot, wait for the first slot
    if timeslots[0][0] > now:
        sleep_time = timeslots[0][0] - now
        sleep_time = sleep_time.seconds

    #If it's after the last slot, wait until the first slot tomorrow.
    elif timeslots[-1][-1] < now:
        sleep_time = timeslots[0][0] + timedelta(days=1) - now
        sleep_time = sleep_time.seconds

    else:
        for slots in timeslots:
            #if it falls between the slots, no sleep & return
            if slots[0] < now < slots[1]:
                sleep_time = 0
                break
            #if it is after the slot, move on to the next slot
            elif now > slots[1]:
                pass
            #if it's before the slot, take the time until that slot
            elif now < slots[0]:
                sleep_time = slots[0] - now
                sleep_time = sleep_time.seconds


    if sleep_time == 0:
        print("No sleep for the wicked")
    else: print("Having some down time. Back in " + str(sleep_time//3600), "hours and ", str((sleep_time//60)%60), "minutes")

    return sleep_time
